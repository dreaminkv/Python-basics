#3: Давайте опишем пару сущностей player и enemy через словарь, который будет иметь ключи и значения:
#name - строка полученная от пользователя,
#health = 100,
#damage = 50. ### Поэкспериментируйте с значениями урона и жизней по желанию. ### Теперь надо создать
# функцию attack(person1, person2). Примечание: имена аргументов можете указать свои.
# ### Функция в качестве аргумента будет принимать атакующего и атакуемого.
# ### В теле функция должна получить параметр damage атакующего и отнять это количество от health атакуемого.
# Функция должна сама работать со словарями и изменять их значения.
#4: Давайте усложним предыдущее задание. Измените сущности, добавив новый параметр - armor = 1.2 (величина брони персонажа)
#Теперь надо добавить новую функцию, которая будет вычислять и возвращать полученный урон по формуле damage / armor
#Следовательно, у вас должно быть 2 функции:
#Наносит урон. Это улучшенная версия функции из задачи 3.
#Вычисляет урон по отношению к броне.

#Примечание. Функция номер 2 используется внутри функции номер 1 для вычисления урона и вычитания его из здоровья персонажа.

name = input('Введите имя игрока: ')
enemy = input('Введите имя врага: ')

player = {'name': name, 'health': 100.0, 'damage': 70, 'armor': 1.1}
enemy = {'name': enemy, 'health': 100.0, 'damage': 30, 'armor': 1.7}

def armor(person1, person2):
    damange = round((person1['damage'] / person2['armor']), 2)
    return damange



def attack(person1, person2):
    person2['health'] -= armor(person1, person2)
    round(person2['health'], 2)



attack(player, enemy)
attack(enemy, player)
attack(player, enemy)
attack(enemy, player)
attack(player, enemy)
attack(player, enemy)

print(player)
print(enemy)
